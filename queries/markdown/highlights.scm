;; extends

((fenced_code_block) @markup.raw.block
  (#set! "priority" 90))

(fenced_code_block
  (fenced_code_block_delimiter) @markup.raw.delimiter
  (#set! conceal ""))

(fenced_code_block
  (info_string
    (language) @conceal
    (#set! conceal "󰅬")))

(link_destination) @markup.link.url

[
  (link_title)
  (link_label)
] @markup.link.label

[
  (list_marker_plus)
  (list_marker_minus)
  (list_marker_star)
  (list_marker_dot)
  (list_marker_parenthesis)
] @markup.list

((list_marker_minus)
 @punctuation.special
 (#offset! @punctuation.special 0 0 0 -1)
 (#set! conceal "•"))

; NOTE: The following has been commented out due to issues with spaces in the
; list marker nodes generated by the parser. If those spaces ever get captured
; by a different node (e.g. block_continuation) we can safely re-add these
; conceals.
; ;; Conceal bullet points
; ([(list_marker_plus) (list_marker_star)]
;   @punctuation.special
;   (#offset! @punctuation.special 0 0 0 -1)
;   (#set! conceal "•"))
; ([(list_marker_plus) (list_marker_star)]
;   @punctuation.special
;   (#any-of? @punctuation.special "+" "*")
;   (#set! conceal "•"))
; ((list_marker_minus)
;   @punctuation.special
;   (#offset! @punctuation.special 0 0 0 -1)
;   (#set! conceal "—"))
; ((list_marker_minus)
;   @punctuation.special
;   (#eq? @punctuation.special "-")
;   (#set! conceal "—"))

(thematic_break) @punctuation.special

(task_list_marker_unchecked) @markup.list.unchecked
((task_list_marker_unchecked)
 @punctuation.special.unchecked
 (#offset! @punctuation.special.unchecked 0 0 -1 -1)
 (#set! conceal ""))

(task_list_marker_checked) @markup.list.checked
((task_list_marker_checked)
 @punctuation.special.checked
 (#offset! @punctuation.special.checked 0 0 -1 -1)
 (#set! conceal ""))

((block_quote) @markup.quote
  (#set! "priority" 90))

[
  (block_continuation)
  (block_quote_marker)
] @punctuation.special

(backslash_escape) @string.escape

(inline) @spell
